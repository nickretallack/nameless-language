// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

Belt_Debug.setupChromeDebugger(/* () */0);

function sortWorker(definitions, seen) {
  var match = Belt_MapString.partition(definitions, (function (param, node) {
          var match = node[/* scope */0];
          if (match) {
            return Belt_SetString.has(seen, match[0]);
          } else {
            return true;
          }
        }));
  var unavailableNodes = match[1];
  var availableNodes = match[0];
  var newSeen = Belt_SetString.fromArray(Belt_MapString.keysToArray(availableNodes));
  if (Belt_MapString.isEmpty(unavailableNodes)) {
    return /* :: */Block.simpleVariant("::", [
              availableNodes,
              /* [] */0
            ]);
  } else {
    return /* :: */Block.simpleVariant("::", [
              availableNodes,
              sortWorker(unavailableNodes, Belt_SetString.union(seen, newSeen))
            ]);
  }
}

function sort(nodes) {
  var definitions = Belt_MapString.keep(nodes, (function (param, node) {
          var match = node[/* kind */1];
          if (typeof match === "number" || !match.tag) {
            return false;
          } else {
            return match[0][/* kind */0] === 3;
          }
        }));
  return Belt_List.reverse(sortWorker(definitions, Belt_SetString.empty));
}

exports.sortWorker = sortWorker;
exports.sort = sort;
/*  Not a pure module */
