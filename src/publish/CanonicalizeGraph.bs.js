// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Helpers$ReactTemplate = require("../Helpers.bs.js");
var Definition$ReactTemplate = require("../Definition.bs.js");
var NodeInputOrdering$ReactTemplate = require("./NodeInputOrdering.bs.js");

function definedNodeKindToString(kind) {
  switch (kind) {
    case 0 : 
        return "function call";
    case 1 : 
        return "value";
    case 2 : 
        return "function pointer call";
    case 3 : 
        return "function definition";
    case 4 : 
        return "constructor";
    case 5 : 
        return "accessor";
    
  }
}

function encodeNode(node) {
  if (typeof node === "number") {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "reference"
                ],
                /* [] */0
              ]);
  } else if (node.tag) {
    var match = node[0];
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "defined"
                ],
                /* :: */[
                  /* tuple */[
                    "kind",
                    definedNodeKindToString(match[/* kind */0])
                  ],
                  /* :: */[
                    /* tuple */[
                      "contentID",
                      match[/* contentID */1]
                    ],
                    /* [] */0
                  ]
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "list"
                ],
                /* :: */[
                  /* tuple */[
                    "length",
                    node[0]
                  ],
                  /* [] */0
                ]
              ]);
  }
}

function encodeConnectionNode(connectionNode) {
  if (connectionNode) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "node"
                ],
                /* :: */[
                  /* tuple */[
                    "index",
                    connectionNode[0]
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "graph"
                ],
                /* [] */0
              ]);
  }
}

function encodeConnectionNib(connectionNib) {
  if (connectionNib) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "nib"
                ],
                /* :: */[
                  /* tuple */[
                    "index",
                    connectionNib[0]
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "value"
                ],
                /* [] */0
              ]);
  }
}

function encodeConnectionSide(connectionSide) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "node",
                encodeConnectionNode(connectionSide[/* node */0])
              ],
              /* :: */[
                /* tuple */[
                  "nib",
                  encodeConnectionNib(connectionSide[/* nib */1])
                ],
                /* [] */0
              ]
            ]);
}

function encodeConnection(connection) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "source",
                encodeConnectionSide(connection[/* source */0])
              ],
              /* :: */[
                /* tuple */[
                  "sink",
                  encodeConnectionSide(connection[/* sink */1])
                ],
                /* [] */0
              ]
            ]);
}

function encodeGraph(graph) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "type",
                "graph"
              ],
              /* :: */[
                /* tuple */[
                  "inputCount",
                  graph[/* inputCount */2]
                ],
                /* :: */[
                  /* tuple */[
                    "outputCount",
                    graph[/* inputCount */2]
                  ],
                  /* :: */[
                    /* tuple */[
                      "nodes",
                      Json_encode.list(encodeNode, graph[/* nodes */0])
                    ],
                    /* :: */[
                      /* tuple */[
                        "connections",
                        Json_encode.list(encodeConnection, graph[/* connections */1])
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]);
}

function canonicalizeConnectionSide(graph, dependencies, nodeOrdering, graphNibOrdering, connectionSide, isSink) {
  var match = connectionSide[/* node */0];
  if (match) {
    var nodeID = match[0];
    var match$1 = connectionSide[/* nib */1];
    var tmp;
    if (typeof match$1 === "number") {
      if (isSink) {
        throw Definition$ReactTemplate.InvalidConnection;
      } else {
        tmp = /* PublishingValueConnection */0;
      }
    } else if (match$1.tag) {
      if (isSink) {
        tmp = /* PublishingNibConnection */[match$1[0]];
      } else {
        throw Definition$ReactTemplate.InvalidConnection;
      }
    } else {
      var match$2 = Belt_MapString.getExn(graph[/* nodes */1], nodeID)[/* kind */1];
      if (typeof match$2 === "number") {
        throw Definition$ReactTemplate.InvalidConnection;
      } else if (match$2.tag) {
        var dependency = Belt_MapString.getExn(dependencies, match$2[0][/* definitionID */1]);
        tmp = /* PublishingNibConnection */[Helpers$ReactTemplate.findIndexExn(isSink ? dependency[/* inputOrdering */1] : dependency[/* outputOrdering */2], match$1[0])];
      } else {
        throw Definition$ReactTemplate.InvalidConnection;
      }
    }
    return /* record */[
            /* node : PublishingNodeConnection */[Helpers$ReactTemplate.findIndexExn(nodeOrdering, nodeID)],
            /* nib */tmp
          ];
  } else {
    var match$3 = connectionSide[/* nib */1];
    var tmp$1;
    if (typeof match$3 === "number") {
      throw Definition$ReactTemplate.InvalidConnection;
    } else if (match$3.tag) {
      throw Definition$ReactTemplate.InvalidConnection;
    } else {
      tmp$1 = /* PublishingNibConnection */[Helpers$ReactTemplate.findIndexExn(graphNibOrdering, match$3[0])];
    }
    return /* record */[
            /* node : PublishingGraphConnection */0,
            /* nib */tmp$1
          ];
  }
}

function canonicalizeGraph(graph, dependencies, display) {
  var nodeOrdering = NodeInputOrdering$ReactTemplate.getNodeInputOrdering(graph, dependencies, display[/* outputOrdering */1]);
  return /* record */[
          /* nodes */Belt_List.map(nodeOrdering, (function (nodeID) {
                  var match = Belt_MapString.getExn(graph[/* nodes */1], nodeID)[/* kind */1];
                  if (typeof match === "number") {
                    return /* PublishingReferenceNode */0;
                  } else if (match.tag) {
                    var match$1 = match[0];
                    return /* PublishingDefinedNode */Block.__(1, [/* record */[
                                /* kind */match$1[/* kind */0],
                                /* contentID */Belt_MapString.getExn(dependencies, match$1[/* definitionID */1])[/* contentID */0]
                              ]]);
                  } else {
                    return /* PublishingListNode */Block.__(0, [match[0]]);
                  }
                })),
          /* connections */Belt_List.sort(Belt_List.map(Belt_Map.toList(graph[/* connections */0]), (function (param) {
                      return /* record */[
                              /* source */canonicalizeConnectionSide(graph, dependencies, nodeOrdering, display[/* inputOrdering */0], param[1], false),
                              /* sink */canonicalizeConnectionSide(graph, dependencies, nodeOrdering, display[/* outputOrdering */1], param[0], true)
                            ];
                    })), Caml_obj.caml_compare),
          /* inputCount */Belt_List.size(display[/* inputOrdering */0]),
          /* outputCount */Belt_List.size(display[/* outputOrdering */1])
        ];
}

function encodeCanonicalGraph(graph, dependencies, display) {
  return encodeGraph(canonicalizeGraph(graph, dependencies, display));
}

exports.definedNodeKindToString = definedNodeKindToString;
exports.encodeNode = encodeNode;
exports.encodeConnectionNode = encodeConnectionNode;
exports.encodeConnectionNib = encodeConnectionNib;
exports.encodeConnectionSide = encodeConnectionSide;
exports.encodeConnection = encodeConnection;
exports.encodeGraph = encodeGraph;
exports.canonicalizeConnectionSide = canonicalizeConnectionSide;
exports.canonicalizeGraph = canonicalizeGraph;
exports.encodeCanonicalGraph = encodeCanonicalGraph;
/* Helpers-ReactTemplate Not a pure module */
