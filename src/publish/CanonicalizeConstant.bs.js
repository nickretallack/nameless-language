// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");

function encodePrimitiveValue(primitiveValue) {
  var tmp;
  switch (primitiveValue.tag | 0) {
    case 0 : 
        tmp = /* :: */Block.simpleVariant("::", [
            /* tuple */[
              "type",
              "integer"
            ],
            /* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "value",
                  primitiveValue[0]
                ],
                /* [] */0
              ])
          ]);
        break;
    case 1 : 
        tmp = /* :: */Block.simpleVariant("::", [
            /* tuple */[
              "type",
              "number"
            ],
            /* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "value",
                  primitiveValue[0]
                ],
                /* [] */0
              ])
          ]);
        break;
    case 2 : 
        tmp = /* :: */Block.simpleVariant("::", [
            /* tuple */[
              "type",
              "text"
            ],
            /* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "value",
                  primitiveValue[0]
                ],
                /* [] */0
              ])
          ]);
        break;
    
  }
  return Json_encode.object_(tmp);
}

function encodeCanonicalConstant(primitiveValue) {
  return Json_encode.object_(/* :: */Block.simpleVariant("::", [
                /* tuple */[
                  "type",
                  "constant"
                ],
                /* :: */Block.simpleVariant("::", [
                    /* tuple */[
                      "value",
                      encodePrimitiveValue(primitiveValue)
                    ],
                    /* [] */0
                  ])
              ]));
}

exports.encodePrimitiveValue = encodePrimitiveValue;
exports.encodeCanonicalConstant = encodeCanonicalConstant;
/* No side effect */
