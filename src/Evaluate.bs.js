// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Helpers$ReactTemplate = require("./Helpers.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function getNumber(value) {
  if (value.tag) {
    throw Caml_builtin_exceptions.not_found;
  } else {
    var primitiveValue = value[0];
    switch (primitiveValue.tag | 0) {
      case 1 : 
          return primitiveValue[0];
      case 0 : 
      case 2 : 
          throw Caml_builtin_exceptions.not_found;
      
    }
  }
}

function addNumbers(inputs) {
  var exit = 0;
  var match = Belt_List.map(inputs, (function (input) {
          return Curry._1(input, /* () */0);
        }));
  if (match) {
    var match$1 = match[1];
    if (match$1 && !match$1[1]) {
      return /* :: */[
              /* PrimitiveValue */Block.__(0, [/* NumberValue */Block.__(1, [getNumber(match[0]) + getNumber(match$1[0])])]),
              /* [] */0
            ];
    } else {
      exit = 1;
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    throw [
          Caml_builtin_exceptions.match_failure,
          /* tuple */[
            "Evaluate.re",
            15,
            6
          ]
        ];
  }
  
}

function evaluateExternal(name, outputIndex, inputs) {
  var externalFunction;
  if (name === "+") {
    externalFunction = addNumbers;
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
  var outputs = Curry._1(externalFunction, inputs);
  return Belt_List.getExn(outputs, outputIndex);
}

function evaluateConnection(definitions, graphImplementation, sink) {
  var source = Belt_Map.getExn(graphImplementation[/* connections */0], sink);
  var match = source[/* node */0];
  if (match) {
    var nodeID = match[0];
    var node = Belt_MapString.getExn(graphImplementation[/* nodes */1], nodeID);
    if (typeof node === "number") {
      return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["Reference!"])]);
    } else if (node.tag) {
      var match$1 = node[0];
      var kind = match$1[/* kind */0];
      var nodeDefinition = Belt_MapString.getExn(definitions, match$1[/* definitionID */1]);
      if (kind !== 1) {
        if (kind !== 0) {
          return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["Defined node?"])]);
        } else {
          var match$2 = nodeDefinition[/* implementation */0];
          if (match$2.tag === 2) {
            var match$3 = source[/* nib */1];
            if (typeof match$3 === "number") {
              throw Caml_builtin_exceptions.not_found;
            } else if (match$3.tag) {
              throw Caml_builtin_exceptions.not_found;
            } else {
              var outputID = match$3[0];
              var outputIndex = Helpers$ReactTemplate.findByIndexExn(nodeDefinition[/* display */2][/* outputOrdering */1], (function (nibID) {
                      return nibID === outputID;
                    }));
              var lazyInputs = Belt_List.map(nodeDefinition[/* display */2][/* inputOrdering */0], (function (nibID, param) {
                      return evaluateConnection(definitions, graphImplementation, /* record */[
                                  /* node : NodeConnection */[nodeID],
                                  /* nib : NibConnection */Block.__(0, [nibID])
                                ]);
                    }));
              return evaluateExternal(match$2[0][/* name */0], outputIndex, lazyInputs);
            }
          } else {
            return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["Value?"])]);
          }
        }
      } else {
        var match$4 = nodeDefinition[/* implementation */0];
        if (match$4.tag) {
          return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["Value?"])]);
        } else {
          return /* PrimitiveValue */Block.__(0, [match$4[0]]);
        }
      }
    } else {
      return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["List!"])]);
    }
  } else {
    return /* PrimitiveValue */Block.__(0, [/* TextValue */Block.__(2, ["Input!"])]);
  }
}

function evaluateGraphOutput(definitions, graphImplementation, outputID) {
  return evaluateConnection(definitions, graphImplementation, /* record */[
              /* node : GraphConnection */0,
              /* nib : NibConnection */Block.__(0, [outputID])
            ]);
}

exports.getNumber = getNumber;
exports.addNumbers = addNumbers;
exports.evaluateExternal = evaluateExternal;
exports.evaluateConnection = evaluateConnection;
exports.evaluateGraphOutput = evaluateGraphOutput;
/* Helpers-ReactTemplate Not a pure module */
