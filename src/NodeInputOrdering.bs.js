// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Definition$ReactTemplate = require("./Definition.bs.js");

function listHas(haystack, needle) {
  return Belt_List.has(haystack, needle, Caml_obj.caml_equal);
}

function id(x) {
  return x;
}

function visitConnection(graph, dependencies, connectionSide, acc) {
  var inputs = acc[1];
  var nodes = acc[0];
  var match = Belt_Map.get(graph[/* connections */0], connectionSide);
  if (match) {
    var match$1 = match[0];
    var nib = match$1[/* nib */1];
    var node = match$1[/* node */0];
    if (node) {
      var nodeID = node[0];
      if (listHas(nodes, nodeID)) {
        return acc;
      } else {
        var nodeAcc_000 = /* :: */[
          nodeID,
          nodes
        ];
        var nodeAcc = /* tuple */[
          nodeAcc_000,
          inputs
        ];
        var match$2 = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
        if (typeof match$2 === "number") {
          return nodeAcc;
        } else if (match$2.tag) {
          var match$3 = match$2[0];
          var match$4 = Definition$ReactTemplate.definedNodeKindHasValueInput(match$3[/* kind */0]);
          var valueAcc = match$4 ? visitConnection(graph, dependencies, /* record */[
                  /* node : NodeConnection */[nodeID],
                  /* nib : ValueConnection */0
                ], nodeAcc) : nodeAcc;
          return Belt_List.reduce(Belt_MapString.getExn(dependencies, match$3[/* definitionID */1])[/* inputOrdering */1], valueAcc, (function (acc, nibID) {
                        return visitConnection(graph, dependencies, /* record */[
                                    /* node : NodeConnection */[nodeID],
                                    /* nib : NibConnection */Block.__(0, [nibID])
                                  ], acc);
                      }));
        } else {
          return Belt_List.reduce(Belt_List.makeBy(match$2[0], id), nodeAcc, (function (acc, index) {
                        return visitConnection(graph, dependencies, /* record */[
                                    /* node : NodeConnection */[nodeID],
                                    /* nib : PositionalConnection */Block.__(1, [index])
                                  ], acc);
                      }));
        }
      }
    } else if (typeof nib === "number") {
      throw Definition$ReactTemplate.InvalidConnection;
    } else if (nib.tag) {
      throw Definition$ReactTemplate.InvalidConnection;
    } else {
      var nibID = nib[0];
      var match$5 = listHas(inputs, nibID);
      if (match$5) {
        return acc;
      } else {
        return /* tuple */[
                nodes,
                /* :: */[
                  nibID,
                  inputs
                ]
              ];
      }
    }
  } else {
    return acc;
  }
}

function getNodeInputOrdering(graph, dependencies, outputOrder) {
  var match = Belt_List.reduce(outputOrder, /* tuple */[
        /* [] */0,
        /* [] */0
      ], (function (acc, nibID) {
          return visitConnection(graph, dependencies, /* record */[
                      /* node : GraphConnection */0,
                      /* nib : NibConnection */Block.__(0, [nibID])
                    ], acc);
        }));
  return /* tuple */[
          Belt_List.reverse(match[0]),
          Belt_List.reverse(match[1])
        ];
}

exports.getNodeInputOrdering = getNodeInputOrdering;
/* Definition-ReactTemplate Not a pure module */
