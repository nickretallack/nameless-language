// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Definition$ReactTemplate = require("./Definition.bs.js");

function listHas(haystack, needle) {
  return Belt_List.has(haystack, needle, Caml_obj.caml_equal);
}

function id(x) {
  return x;
}

function visitConnection(graph, dependencies, connectionSide, nodes) {
  var match = Belt_Map.get(graph[/* connections */0], connectionSide);
  if (match) {
    var node = match[0][/* node */0];
    if (node) {
      var nodeID = node[0];
      if (listHas(nodes, nodeID)) {
        return nodes;
      } else {
        var nodeAcc = /* :: */[
          nodeID,
          nodes
        ];
        var match$1 = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
        if (typeof match$1 === "number") {
          return nodeAcc;
        } else if (match$1.tag) {
          var match$2 = match$1[0];
          var match$3 = Definition$ReactTemplate.definedNodeKindHasValueInput(match$2[/* kind */0]);
          var valueAcc = match$3 ? visitConnection(graph, dependencies, /* record */[
                  /* node : NodeConnection */[nodeID],
                  /* nib : ValueConnection */0
                ], nodeAcc) : nodeAcc;
          return Belt_List.reduce(Belt_MapString.getExn(dependencies, match$2[/* definitionID */1])[/* inputOrdering */1], valueAcc, (function (acc, nibID) {
                        return visitConnection(graph, dependencies, /* record */[
                                    /* node : NodeConnection */[nodeID],
                                    /* nib : NibConnection */Block.__(0, [nibID])
                                  ], acc);
                      }));
        } else {
          return Belt_List.reduce(Belt_List.makeBy(match$1[0], id), nodeAcc, (function (nodes, index) {
                        return visitConnection(graph, dependencies, /* record */[
                                    /* node : NodeConnection */[nodeID],
                                    /* nib : PositionalConnection */Block.__(1, [index])
                                  ], nodes);
                      }));
        }
      }
    } else {
      return nodes;
    }
  } else {
    return nodes;
  }
}

function getNodeInputOrdering(graph, dependencies, outputOrdering) {
  return Belt_List.reverse(Belt_List.reduce(outputOrdering, /* [] */0, (function (acc, nibID) {
                    return visitConnection(graph, dependencies, /* record */[
                                /* node : GraphConnection */0,
                                /* nib : NibConnection */Block.__(0, [nibID])
                              ], acc);
                  })));
}

exports.getNodeInputOrdering = getNodeInputOrdering;
/* Definition-ReactTemplate Not a pure module */
