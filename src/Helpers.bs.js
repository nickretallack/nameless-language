// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Printf = require("bs-platform/lib/js/printf.js");
var Random = require("bs-platform/lib/js/random.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");

function sortBy(list, func) {
  return Belt_List.map(Belt_List.sort(Belt_List.map(list, (function (item) {
                        return /* tuple */[
                                Curry._1(func, item),
                                item
                              ];
                      })), Caml_obj.caml_compare), (function (prim) {
                return prim[1];
              }));
}

Random.init(Date.now() | 0);

function randomHex(param) {
  return Curry._1(Printf.sprintf(/* Format */[
                  /* Int */Block.__(4, [
                      /* Int_x */6,
                      /* No_padding */0,
                      /* No_precision */0,
                      /* End_of_format */0
                    ]),
                  "%x"
                ]), Random.$$int(16));
}

function randomId(param) {
  return $$String.concat("", Belt_List.makeBy(32, (function (param) {
                    return randomHex(/* () */0);
                  })));
}

function pixels(x) {
  return String(x) + "px";
}

function pointFromMouse($$event) {
  return /* record */[
          /* x */$$event.clientX,
          /* y */$$event.clientY
        ];
}

function positionStyle(position) {
  return {
          left: String(position[/* x */0]) + "px",
          top: String(position[/* y */1]) + "px"
        };
}

function iterateTouches($$event, callback) {
  return $$Array.iter(callback, $$event.changedTouches);
}

exports.sortBy = sortBy;
exports.randomHex = randomHex;
exports.randomId = randomId;
exports.pixels = pixels;
exports.pointFromMouse = pointFromMouse;
exports.positionStyle = positionStyle;
exports.iterateTouches = iterateTouches;
/*  Not a pure module */
