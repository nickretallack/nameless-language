// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function primitiveValueTypeToString(primitiveValueType) {
  switch (primitiveValueType) {
    case 0 : 
        return "integer";
    case 1 : 
        return "number";
    case 2 : 
        return "text";
    
  }
}

function encodeValueType(valueType) {
  if (valueType.tag) {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "defined"
                ],
                /* :: */[
                  /* tuple */[
                    "contentID",
                    valueType[0]
                  ],
                  /* [] */0
                ]
              ]);
  } else {
    return Json_encode.object_(/* :: */[
                /* tuple */[
                  "type",
                  "primitive"
                ],
                /* :: */[
                  /* tuple */[
                    "primitiveType",
                    primitiveValueTypeToString(valueType[0])
                  ],
                  /* [] */0
                ]
              ]);
  }
}

function encodeTypedFields(fields) {
  return Json_encode.list(encodeValueType, fields);
}

function canonicalizeTypedFields(typedFields, dependencies, fieldOrdering) {
  return Belt_List.map(fieldOrdering, (function (nibID) {
                var match = Belt_MapString.getExn(typedFields, nibID);
                if (match.tag) {
                  return /* PublishingDefinedValueType */Block.__(1, [Belt_MapString.getExn(dependencies, match[0])[/* contentID */0]]);
                } else {
                  return /* PublishingPrimitiveValueType */Block.__(0, [match[0]]);
                }
              }));
}

function encodeCanonicalRecord(typedFields, dependencies, fieldOrdering) {
  var fields = canonicalizeTypedFields(typedFields, dependencies, fieldOrdering);
  return Json_encode.list(encodeValueType, fields);
}

exports.primitiveValueTypeToString = primitiveValueTypeToString;
exports.encodeValueType = encodeValueType;
exports.encodeTypedFields = encodeTypedFields;
exports.canonicalizeTypedFields = canonicalizeTypedFields;
exports.encodeCanonicalRecord = encodeCanonicalRecord;
/* Json_encode Not a pure module */
