// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Definition$ReactTemplate = require("./Definition.bs.js");
var OutputOrdering$ReactTemplate = require("./OutputOrdering.bs.js");
var NodeInputOrdering$ReactTemplate = require("./NodeInputOrdering.bs.js");

function findIndexExn(list, needle) {
  if (list) {
    var match = Caml_obj.caml_equal(list[0], needle);
    if (match) {
      return 0;
    } else {
      return 1 + findIndexExn(list[1], needle) | 0;
    }
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function canonicalizeConnectionSide(graph, dependencies, nodeOrdering, graphNibOrdering, connectionSide, isSink) {
  var match = connectionSide[/* node */0];
  if (match) {
    var nodeID = match[0];
    var match$1 = connectionSide[/* nib */1];
    var tmp;
    if (match$1) {
      var match$2 = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
      if (match$2) {
        var dependency = Belt_MapString.getExn(dependencies, match$2[0][/* definitionID */1]);
        tmp = /* PublishingNibConnection */[findIndexExn(isSink ? dependency[/* inputOrdering */1] : dependency[/* outputOrdering */2], match$1[0])];
      } else {
        throw Definition$ReactTemplate.InvalidConnection;
      }
    } else if (isSink) {
      throw Definition$ReactTemplate.InvalidConnection;
    } else {
      tmp = /* PublishingValueConnection */0;
    }
    return /* record */[
            /* node : PublishingNodeConnection */[findIndexExn(nodeOrdering, nodeID)],
            /* nib */tmp
          ];
  } else {
    var match$3 = connectionSide[/* nib */1];
    var tmp$1;
    if (match$3) {
      tmp$1 = /* PublishingNibConnection */[findIndexExn(graphNibOrdering, match$3[0])];
    } else {
      throw Definition$ReactTemplate.InvalidConnection;
    }
    return /* record */[
            /* node : PublishingGraphConnection */0,
            /* nib */tmp$1
          ];
  }
}

function canonicalizeGraph(graph, dependencies) {
  var outputOrdering = OutputOrdering$ReactTemplate.getOutputOrdering(graph, dependencies);
  var match = NodeInputOrdering$ReactTemplate.getNodeInputOrdering(graph, dependencies, outputOrdering);
  var inputOrdering = match[1];
  var nodeOrdering = match[0];
  return /* record */[
          /* nodes */Belt_List.map(nodeOrdering, (function (nodeID) {
                  var match = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
                  if (match) {
                    var match$1 = match[0];
                    return /* PublishingDefinedNode */[/* record */[
                              /* kind */match$1[/* kind */0],
                              /* contentID */Belt_MapString.getExn(dependencies, match$1[/* definitionID */1])[/* contentID */0]
                            ]];
                  } else {
                    return /* PublishingReferenceNode */0;
                  }
                })),
          /* connections */Belt_List.sort(Belt_List.map(Belt_Map.toList(graph[/* connections */0]), (function (param) {
                      return /* record */[
                              /* source */canonicalizeConnectionSide(graph, dependencies, nodeOrdering, inputOrdering, param[1], false),
                              /* sink */canonicalizeConnectionSide(graph, dependencies, nodeOrdering, outputOrdering, param[0], true)
                            ];
                    })), Caml_obj.caml_compare),
          /* inputCount */Belt_List.size(inputOrdering),
          /* outputCount */Belt_List.size(outputOrdering)
        ];
}

exports.findIndexExn = findIndexExn;
exports.canonicalizeConnectionSide = canonicalizeConnectionSide;
exports.canonicalizeGraph = canonicalizeGraph;
/* Definition-ReactTemplate Not a pure module */
