// Generated by BUCKLESCRIPT VERSION 3.1.5, PLEASE EDIT WITH CARE
'use strict';

var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Definition$ReactTemplate = require("./Definition.bs.js");
var OutputOrdering$ReactTemplate = require("./OutputOrdering.bs.js");
var NodeInputOrdering$ReactTemplate = require("./NodeInputOrdering.bs.js");

function findIndexExn(list, needle) {
  if (list) {
    var match = Caml_obj.caml_equal(list[0], needle);
    if (match) {
      return 0;
    } else {
      return 1 + findIndexExn(list[1], needle) | 0;
    }
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
}

function canonicalizeGraph(graph, dependencies) {
  var outputOrdering = OutputOrdering$ReactTemplate.getOutputOrdering(graph, dependencies);
  var match = NodeInputOrdering$ReactTemplate.getNodeInputOrdering(graph, dependencies, outputOrdering);
  var inputOrdering = match[1];
  var nodeOrdering = match[0];
  return /* record */[
          /* nodes */Belt_List.map(nodeOrdering, (function (nodeID) {
                  var match = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
                  if (match) {
                    var match$1 = match[0];
                    return /* PublishingDefinedNode */[/* record */[
                              /* kind */match$1[/* kind */0],
                              /* contentID */Belt_MapString.getExn(dependencies, match$1[/* definitionID */1])[/* contentID */0]
                            ]];
                  } else {
                    return /* PublishingReferenceNode */0;
                  }
                })),
          /* connections */Belt_List.sort(Belt_List.map(Belt_Map.toList(graph[/* connections */0]), (function (param) {
                      var source = param[1];
                      var sink = param[0];
                      var match = source[/* node */0];
                      var tmp;
                      if (match) {
                        var nodeID = match[0];
                        var match$1 = source[/* nib */1];
                        var tmp$1;
                        if (match$1) {
                          var match$2 = Belt_MapString.getExn(graph[/* nodes */1], nodeID);
                          if (match$2) {
                            tmp$1 = /* PublishingNibConnection */[findIndexExn(Belt_MapString.getExn(dependencies, match$2[0][/* definitionID */1])[/* outputOrdering */2], match$1[0])];
                          } else {
                            throw Definition$ReactTemplate.InvalidConnection;
                          }
                        } else {
                          tmp$1 = /* PublishingValueConnection */0;
                        }
                        tmp = /* record */[
                          /* node : PublishingNodeConnection */[findIndexExn(nodeOrdering, nodeID)],
                          /* nib */tmp$1
                        ];
                      } else {
                        var match$3 = source[/* nib */1];
                        var tmp$2;
                        if (match$3) {
                          tmp$2 = /* PublishingNibConnection */[findIndexExn(inputOrdering, match$3[0])];
                        } else {
                          throw Definition$ReactTemplate.InvalidConnection;
                        }
                        tmp = /* record */[
                          /* node : PublishingGraphConnection */0,
                          /* nib */tmp$2
                        ];
                      }
                      var match$4 = sink[/* node */0];
                      var tmp$3;
                      if (match$4) {
                        var nodeID$1 = match$4[0];
                        var match$5 = sink[/* nib */1];
                        var tmp$4;
                        if (match$5) {
                          var match$6 = Belt_MapString.getExn(graph[/* nodes */1], nodeID$1);
                          if (match$6) {
                            tmp$4 = /* PublishingNibConnection */[findIndexExn(Belt_MapString.getExn(dependencies, match$6[0][/* definitionID */1])[/* inputOrdering */1], match$5[0])];
                          } else {
                            throw Definition$ReactTemplate.InvalidConnection;
                          }
                        } else {
                          throw Definition$ReactTemplate.InvalidConnection;
                        }
                        tmp$3 = /* record */[
                          /* node : PublishingNodeConnection */[findIndexExn(nodeOrdering, nodeID$1)],
                          /* nib */tmp$4
                        ];
                      } else {
                        var match$7 = sink[/* nib */1];
                        var tmp$5;
                        if (match$7) {
                          tmp$5 = /* PublishingNibConnection */[findIndexExn(outputOrdering, match$7[0])];
                        } else {
                          throw Definition$ReactTemplate.InvalidConnection;
                        }
                        tmp$3 = /* record */[
                          /* node : PublishingGraphConnection */0,
                          /* nib */tmp$5
                        ];
                      }
                      return /* record */[
                              /* source */tmp,
                              /* sink */tmp$3
                            ];
                    })), Caml_obj.caml_compare),
          /* inputCount */Belt_List.size(inputOrdering),
          /* outputCount */Belt_List.size(outputOrdering)
        ];
}

exports.findIndexExn = findIndexExn;
exports.canonicalizeGraph = canonicalizeGraph;
/* Definition-ReactTemplate Not a pure module */
