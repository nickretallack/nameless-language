// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Helpers$ReactTemplate = require("../Helpers.bs.js");

var color = "rgb(160,160,160)";

var component = ReasonReact.reducerComponent("Nib");

function make(isSource, connectionSide, position, text, emit, isHighlighted, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var match = self[/* state */1][0];
              if (match !== undefined) {
                Caml_option.valFromOption(match).addEventListener("finish-drawing", (function ($$event) {
                        return Curry._1(emit, /* PointerAction */Block.__(0, [/* record */[
                                        /* pointerID : Touch */[$$event.detail.identifier],
                                        /* action : FinishDrawing */Block.__(2, [/* record */[
                                              /* connectionSide */connectionSide,
                                              /* isSource */isSource
                                            ]])
                                      ]]));
                      }));
                return /* () */0;
              } else {
                return /* () */0;
              }
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              return React.createElement(React.Fragment, undefined, React.createElement("text", {
                              alignmentBaseline: "central",
                              textAnchor: isSource ? "start" : "end",
                              x: Helpers$ReactTemplate.pixels(position[/* x */0] + 10.0 * (
                                    isSource ? 1.0 : -1.0
                                  )),
                              y: Helpers$ReactTemplate.pixels(position[/* y */1])
                            }, text), React.createElement("circle", {
                              ref: (function (ref) {
                                  self[/* state */1][0] = (ref == null) ? undefined : Caml_option.some(ref);
                                  return /* () */0;
                                }),
                              onMouseDown: (function ($$event) {
                                  return Curry._1(emit, /* PointerAction */Block.__(0, [/* record */[
                                                  /* pointerID : Mouse */0,
                                                  /* action : StartDrawing */Block.__(0, [/* record */[
                                                        /* explicitConnectionSide : record */[
                                                          /* connectionSide */connectionSide,
                                                          /* isSource */isSource
                                                        ],
                                                        /* point */Helpers$ReactTemplate.pointFromMouse($$event)
                                                      ]])
                                                ]]));
                                }),
                              onMouseUp: (function (param) {
                                  return Curry._1(emit, /* PointerAction */Block.__(0, [/* record */[
                                                  /* pointerID : Mouse */0,
                                                  /* action : FinishDrawing */Block.__(2, [/* record */[
                                                        /* connectionSide */connectionSide,
                                                        /* isSource */isSource
                                                      ]])
                                                ]]));
                                }),
                              onTouchEnd: (function ($$event) {
                                  return Helpers$ReactTemplate.iterateTouches($$event, (function (touch) {
                                                document.elementFromPoint(touch.clientX, touch.clientY).dispatchEvent(new CustomEvent("finish-drawing", {
                                                          detail: {
                                                            identifier: touch.identifier
                                                          }
                                                        }));
                                                return /* () */0;
                                              }));
                                }),
                              onTouchStart: (function ($$event) {
                                  return Helpers$ReactTemplate.iterateTouches($$event, (function (touch) {
                                                return Curry._1(emit, /* PointerAction */Block.__(0, [/* record */[
                                                                /* pointerID : Touch */[touch.identifier],
                                                                /* action : StartDrawing */Block.__(0, [/* record */[
                                                                      /* explicitConnectionSide : record */[
                                                                        /* connectionSide */connectionSide,
                                                                        /* isSource */isSource
                                                                      ],
                                                                      /* point : record */[
                                                                        /* x */touch.clientX,
                                                                        /* y */touch.clientY
                                                                      ]
                                                                    ]])
                                                              ]]));
                                              }));
                                }),
                              cx: Helpers$ReactTemplate.pixels(position[/* x */0]),
                              cy: Helpers$ReactTemplate.pixels(position[/* y */1]),
                              fill: isSource ? color : "white",
                              r: "6",
                              stroke: isHighlighted ? "red" : color,
                              strokeWidth: "2"
                            }));
            }),
          /* initialState */(function (param) {
              return /* record */[/* contents */undefined];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (param, param$1) {
              return /* NoUpdate */0;
            }),
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var sidePadding = 10.0;

exports.sidePadding = sidePadding;
exports.color = color;
exports.component = component;
exports.make = make;
/* component Not a pure module */
