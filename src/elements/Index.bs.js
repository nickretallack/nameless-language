// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Belt_Set = require("bs-platform/lib/js/belt_Set.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var App$ReactTemplate = require("./App.bs.js");
var Definition$ReactTemplate = require("../Definition.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

var example = Definition$ReactTemplate.makeGraph("Example Definition", "An example function", /* array */[
      /* tuple */[
        "in1",
        "In 1"
      ],
      /* tuple */[
        "in2",
        "In 2"
      ]
    ], /* array */[
      /* tuple */[
        "out1",
        "Out 1"
      ],
      /* tuple */[
        "out2",
        "Out 2"
      ]
    ], /* array */[
      /* tuple */[
        "node1",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "example"
                  ])])
          ])
      ],
      /* tuple */[
        "node2",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "example"
                  ])])
          ])
      ],
      /* tuple */[
        "node3",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "example"
                  ])])
          ])
      ]
    ], /* array */[
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node1"]),
            Block.variant("NibConnection", 0, ["in1"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node2"]),
            Block.variant("NibConnection", 0, ["out1"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node1"]),
            Block.variant("NibConnection", 0, ["in2"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node2"]),
            Block.variant("NibConnection", 0, ["out2"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["out2"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node1"]),
            Block.variant("NibConnection", 0, ["out2"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node2"]),
            Block.variant("NibConnection", 0, ["in1"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["in1"])
          ])
      ]
    ], /* () */0);

var simple = Definition$ReactTemplate.makeGraph("Simple Definition", "A simple function", /* array */[
      /* tuple */[
        "in1",
        "In 1"
      ],
      /* tuple */[
        "in2",
        "In 2"
      ]
    ], /* array */[
      /* tuple */[
        "out1",
        "Out 1"
      ],
      /* tuple */[
        "out2",
        "Out 2"
      ]
    ], /* array */[
      /* tuple */[
        "node1",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "node2",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "node3",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "plus"
                  ])])
          ])
      ]
    ], /* array */[
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["out1"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node3"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node3"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node1"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node3"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["node2"]),
            0
          ])
      ]
    ], /* () */0);

var one = Definition$ReactTemplate.makeDefinition(undefined, undefined, undefined, undefined, /* ConstantImplementation */Block.variant("ConstantImplementation", 0, [/* NumberValue */Block.variant("NumberValue", 1, [1.0])]), /* () */0);

var point = Definition$ReactTemplate.makeDefinition("2D Point", "X and Y coordinates", /* array */[
      /* tuple */[
        "x",
        "X"
      ],
      /* tuple */[
        "y",
        "Y"
      ]
    ], undefined, /* RecordTypeImplementation */Block.variant("RecordTypeImplementation", 4, [Belt_MapString.fromArray(/* array */[
              /* tuple */[
                "x",
                /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
              ],
              /* tuple */[
                "y",
                /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
              ]
            ])]), /* () */0);

var plus = Definition$ReactTemplate.makeDefinition("+", "Add two numbers, resulting in a number.", /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "+",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]])
              ])
          ])]), /* () */0);

var minus = Definition$ReactTemplate.makeDefinition("-", "Subtract two numbers, resulting in a number.", /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "-",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]])
              ])
          ])]), /* () */0);

var times = Definition$ReactTemplate.makeDefinition("*", "Multiply two numbers, resulting in a number.", /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "*",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]])
              ])
          ])]), /* () */0);

var divide = Definition$ReactTemplate.makeDefinition("/", "Subtract two numbers, resulting in a number.", /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "/",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]])
              ])
          ])]), /* () */0);

var pointExample = Definition$ReactTemplate.makeGraph("Point Example", "", /* array */[], /* array */[
      /* tuple */[
        "x",
        "X"
      ],
      /* tuple */[
        "y",
        "Y"
      ]
    ], /* array */[
      /* tuple */[
        "constructor",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    4,
                    "point"
                  ])])
          ])
      ],
      /* tuple */[
        "destructure",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    5,
                    "point"
                  ])])
          ])
      ],
      /* tuple */[
        "x",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "y",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ]
    ], /* array */[
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["constructor"]),
            Block.variant("NibConnection", 0, ["x"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["x"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["constructor"]),
            Block.variant("NibConnection", 0, ["y"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["y"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["destructure"]),
            0
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["constructor"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["x"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["destructure"]),
            Block.variant("NibConnection", 0, ["x"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["y"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["destructure"]),
            Block.variant("NibConnection", 0, ["y"])
          ])
      ]
    ], /* () */0);

var referenceExample = Definition$ReactTemplate.makeGraph("Reference example", "", /* array */[], /* array */[/* tuple */[
        "reference",
        "Reference"
      ]], /* array */[/* tuple */[
        "reference",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            0
          ])
      ]], /* array */[/* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["reference"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["reference"]),
            0
          ])
      ]], /* () */0);

var exampleInterface = Definition$ReactTemplate.makeDefinition("Example Interface", undefined, /* array */[
      /* tuple */[
        "in-left",
        "Left"
      ],
      /* tuple */[
        "in-right",
        "Right"
      ]
    ], /* array */[
      /* tuple */[
        "out-left",
        "Left"
      ],
      /* tuple */[
        "out-right",
        "Right"
      ]
    ], /* InterfaceImplementation */Block.variant("InterfaceImplementation", 1, [/* record */Block.record([
            "inputTypes",
            "outputTypes"
          ], [
            Belt_MapString.fromArray(/* array */[
                  /* tuple */[
                    "in-left",
                    /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                  ],
                  /* tuple */[
                    "in-right",
                    /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                  ]
                ]),
            Belt_MapString.fromArray(/* array */[
                  /* tuple */[
                    "out-left",
                    /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                  ],
                  /* tuple */[
                    "out-right",
                    /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                  ]
                ])
          ])]), /* () */0);

var interfaceExample = Definition$ReactTemplate.makeGraph("Interface Example", undefined, undefined, /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* array */[
      /* tuple */[
        "definition",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    3,
                    "example-interface"
                  ])])
          ])
      ],
      /* tuple */[
        "plus1",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "plus"
                  ])])
          ])
      ]
    ], /* array */[], /* () */0);

var nestedInlineExample = Definition$ReactTemplate.makeGraph("Nested Inline Functions Example", undefined, undefined, /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* array */[
      /* tuple */[
        "definition",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    3,
                    "example-interface"
                  ])])
          ])
      ],
      /* tuple */[
        "definition2",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            Block.simpleVariant("NodeScope", ["definition"]),
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    3,
                    "example-interface"
                  ])])
          ])
      ],
      /* tuple */[
        "definition3",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    3,
                    "example-interface"
                  ])])
          ])
      ],
      /* tuple */[
        "plus",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            Block.simpleVariant("NodeScope", ["definition3"]),
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "plus"
                  ])])
          ])
      ],
      /* tuple */[
        "plus2",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "plus"
                  ])])
          ])
      ]
    ], /* array */[/* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["plus"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["plus2"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ]], /* () */0);

var yesLabel = Definition$ReactTemplate.makeDefinition("Yes", undefined, undefined, undefined, /* LabeledTypeImplementation */Block.variant("LabeledTypeImplementation", 5, [undefined]), /* () */0);

var noLabel = Definition$ReactTemplate.makeDefinition("No", undefined, undefined, undefined, /* LabeledTypeImplementation */Block.variant("LabeledTypeImplementation", 5, [undefined]), /* () */0);

var booleanUnion = Definition$ReactTemplate.makeDefinition("Boolean", undefined, undefined, undefined, /* UnionTypeImplementation */Block.variant("UnionTypeImplementation", 6, [Belt_Set.fromArray(/* array */[
              /* DefinedValueType */Block.variant("DefinedValueType", 1, ["yes"]),
              /* DefinedValueType */Block.variant("DefinedValueType", 1, ["no"])
            ], Definition$ReactTemplate.ValueTypeComparator)]), /* () */0);

var branch = Definition$ReactTemplate.makeDefinition("Branch", "Conditionally evaluate.", /* array */[
      /* tuple */[
        "if",
        "If"
      ],
      /* tuple */[
        "then",
        "Then"
      ],
      /* tuple */[
        "else",
        "Otherwise"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "branch",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "if",
                        /* DefinedValueType */Block.variant("DefinedValueType", 1, ["boolean"])
                      ],
                      /* tuple */[
                        "then",
                        /* AnyType */0
                      ],
                      /* tuple */[
                        "else",
                        /* AnyType */0
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* AnyType */0
                      ]])
              ])
          ])]), /* () */0);

var equals = Definition$ReactTemplate.makeDefinition("=", undefined, /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "=",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* DefinedValueType */Block.variant("DefinedValueType", 1, ["boolean"])
                      ]])
              ])
          ])]), /* () */0);

var lessThan = Definition$ReactTemplate.makeDefinition("<", undefined, /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            "<",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* DefinedValueType */Block.variant("DefinedValueType", 1, ["boolean"])
                      ]])
              ])
          ])]), /* () */0);

var greaterThan = Definition$ReactTemplate.makeDefinition(">", undefined, /* array */[
      /* tuple */[
        "left",
        "Left"
      ],
      /* tuple */[
        "right",
        "Right"
      ]
    ], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* ExternalImplementation */Block.variant("ExternalImplementation", 2, [/* record */Block.record([
            "name",
            "interface"
          ], [
            ">",
            Block.record([
                "inputTypes",
                "outputTypes"
              ], [
                Belt_MapString.fromArray(/* array */[
                      /* tuple */[
                        "left",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ],
                      /* tuple */[
                        "right",
                        /* PrimitiveValueType */Block.variant("PrimitiveValueType", 0, [/* NumberType */1])
                      ]
                    ]),
                Belt_MapString.fromArray(/* array */[/* tuple */[
                        "result",
                        /* DefinedValueType */Block.variant("DefinedValueType", 1, ["boolean"])
                      ]])
              ])
          ])]), /* () */0);

var factorial = Definition$ReactTemplate.makeGraph("Factorial", undefined, /* array */[/* tuple */[
        "input",
        "Input"
      ]], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* array */[
      /* tuple */[
        "one",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "branch",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "branch"
                  ])])
          ])
      ],
      /* tuple */[
        "less-than",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "less-than"
                  ])])
          ])
      ],
      /* tuple */[
        "times",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "times"
                  ])])
          ])
      ],
      /* tuple */[
        "minus",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "minus"
                  ])])
          ])
      ],
      /* tuple */[
        "factorial",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "factorial"
                  ])])
          ])
      ]
    ], /* array */[
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["result"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["if"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["then"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["else"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["factorial"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["factorial"]),
            Block.variant("NibConnection", 0, ["input"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one"]),
            0
          ])
      ]
    ], /* () */0);

var factorial2 = Definition$ReactTemplate.makeGraph("Factorial", undefined, /* array */[/* tuple */[
        "input",
        "Input"
      ]], /* array */[/* tuple */[
        "result",
        "Result"
      ]], /* array */[
      /* tuple */[
        "one1",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "one2",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "one3",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    1,
                    "one"
                  ])])
          ])
      ],
      /* tuple */[
        "branch",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "branch"
                  ])])
          ])
      ],
      /* tuple */[
        "less-than",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "less-than"
                  ])])
          ])
      ],
      /* tuple */[
        "times",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "times"
                  ])])
          ])
      ],
      /* tuple */[
        "minus",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "minus"
                  ])])
          ])
      ],
      /* tuple */[
        "factorial",
        /* record */Block.record([
            "scope",
            "kind"
          ], [
            0,
            Block.variant("DefinedNode", 1, [/* record */Block.record([
                    "kind",
                    "definitionID"
                  ], [
                    0,
                    "factorial"
                  ])])
          ])
      ]
    ], /* array */[
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["result"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["if"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["then"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one1"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["less-than"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one2"]),
            0
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["branch"]),
            Block.variant("NibConnection", 0, ["else"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["times"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["factorial"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["factorial"]),
            Block.variant("NibConnection", 0, ["input"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["result"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["left"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            0,
            Block.variant("NibConnection", 0, ["input"])
          ])
      ],
      /* tuple */[
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["minus"]),
            Block.variant("NibConnection", 0, ["right"])
          ]),
        /* record */Block.record([
            "node",
            "nib"
          ], [
            Block.simpleVariant("NodeConnection", ["one3"]),
            0
          ])
      ]
    ], /* () */0);

var definitions = Belt_MapString.fromArray(/* array */[
      /* tuple */[
        "yes",
        yesLabel
      ],
      /* tuple */[
        "no",
        noLabel
      ],
      /* tuple */[
        "boolean",
        booleanUnion
      ],
      /* tuple */[
        "plus",
        plus
      ],
      /* tuple */[
        "minus",
        minus
      ],
      /* tuple */[
        "times",
        times
      ],
      /* tuple */[
        "divide",
        divide
      ],
      /* tuple */[
        "less-than",
        lessThan
      ],
      /* tuple */[
        "greater-than",
        greaterThan
      ],
      /* tuple */[
        "branch",
        branch
      ],
      /* tuple */[
        "one",
        one
      ],
      /* tuple */[
        "point",
        point
      ],
      /* tuple */[
        "example-interface",
        exampleInterface
      ],
      /* tuple */[
        "example",
        example
      ],
      /* tuple */[
        "simple",
        simple
      ],
      /* tuple */[
        "point-example",
        pointExample
      ],
      /* tuple */[
        "reference-example",
        referenceExample
      ],
      /* tuple */[
        "interface-example",
        interfaceExample
      ],
      /* tuple */[
        "nested-inline-example",
        nestedInlineExample
      ],
      /* tuple */[
        "factorial",
        factorial
      ],
      /* tuple */[
        "factorial2",
        factorial2
      ]
    ]);

ReactDOMRe.renderToElementWithId(ReasonReact.element(undefined, undefined, App$ReactTemplate.make(definitions, /* array */[])), "graph");

exports.example = example;
exports.simple = simple;
exports.one = one;
exports.point = point;
exports.plus = plus;
exports.minus = minus;
exports.times = times;
exports.divide = divide;
exports.pointExample = pointExample;
exports.referenceExample = referenceExample;
exports.exampleInterface = exampleInterface;
exports.interfaceExample = interfaceExample;
exports.nestedInlineExample = nestedInlineExample;
exports.yesLabel = yesLabel;
exports.noLabel = noLabel;
exports.booleanUnion = booleanUnion;
exports.branch = branch;
exports.equals = equals;
exports.lessThan = lessThan;
exports.greaterThan = greaterThan;
exports.factorial = factorial;
exports.factorial2 = factorial2;
exports.definitions = definitions;
/*  Not a pure module */
