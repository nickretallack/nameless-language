// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var ReasonReact = require("reason-react/src/ReasonReact.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var NibsBox$ReactTemplate = require("./NibsBox.bs.js");
var Definition$ReactTemplate = require("../Definition.bs.js");
var SvgDefinitionBox$ReactTemplate = require("./SvgDefinitionBox.bs.js");

var component = ReasonReact.statelessComponent("Node");

function make(node, definitions, position, size, nodeWidth, textHeight, _children) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var makeNode = function (name) {
                return ReasonReact.element(undefined, undefined, NibsBox$ReactTemplate.make(name, position, size[/* y */1], nodeWidth, textHeight, /* array */[]));
              };
              var match = node[/* kind */1];
              if (typeof match === "number") {
                return makeNode("Reference");
              } else if (match.tag) {
                var definition = Belt_MapString.getExn(definitions, match[0][/* definitionID */1]);
                var name = Definition$ReactTemplate.getDisplayName(definition, "en");
                if (Definition$ReactTemplate.isFunctionDefinitionNode(node)) {
                  return ReasonReact.element(undefined, undefined, SvgDefinitionBox$ReactTemplate.make(name, position, size, nodeWidth, textHeight, /* array */[]));
                } else {
                  return makeNode(name);
                }
              } else {
                return makeNode("List");
              }
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.component = component;
exports.make = make;
/* component Not a pure module */
