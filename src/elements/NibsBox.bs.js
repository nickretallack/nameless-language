// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var React = require("react");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Helpers$ReactTemplate = require("../Helpers.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

var component = ReasonReact.statelessComponent("NibNames");

function make(name, position, height, nodeWidth, textHeight, $staropt$star, onDoubleClick, onClick, onMouseDown, onTouchStart, onMouseUp, onTouchEnd, _children) {
  var selected = $staropt$star !== undefined ? $staropt$star : false;
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (_self) {
                var tmp = { };
                if (onClick !== undefined) {
                  tmp.onClick = Caml_option.valFromOption(onClick);
                }
                if (onDoubleClick !== undefined) {
                  tmp.onDoubleClick = Caml_option.valFromOption(onDoubleClick);
                }
                if (onMouseDown !== undefined) {
                  tmp.onMouseDown = Caml_option.valFromOption(onMouseDown);
                }
                if (onMouseUp !== undefined) {
                  tmp.onMouseUp = Caml_option.valFromOption(onMouseUp);
                }
                if (onTouchEnd !== undefined) {
                  tmp.onTouchEnd = Caml_option.valFromOption(onTouchEnd);
                }
                if (onTouchStart !== undefined) {
                  tmp.onTouchStart = Caml_option.valFromOption(onTouchStart);
                }
                return React.createElement("g", tmp, React.createElement("rect", {
                                height: Helpers$ReactTemplate.pixels(height),
                                width: Helpers$ReactTemplate.pixels(nodeWidth),
                                fill: selected ? "blue" : "black",
                                fillOpacity: "0.1",
                                x: Helpers$ReactTemplate.pixels(position[/* x */0]),
                                y: Helpers$ReactTemplate.pixels(position[/* y */1])
                              }), name !== undefined ? React.createElement("text", {
                                  alignmentBaseline: "central",
                                  textAnchor: "middle",
                                  x: Helpers$ReactTemplate.pixels(position[/* x */0] + nodeWidth / 2.0),
                                  y: Helpers$ReactTemplate.pixels(position[/* y */1] + textHeight / 2.0)
                                }, name) : null);
              }),
            component[/* initialState */10],
            component[/* retainedProps */11],
            component[/* reducer */12],
            component[/* jsElementWrapped */13]
          ]);
}

exports.component = component;
exports.make = make;
/*  Not a pure module */
