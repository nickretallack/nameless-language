// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Debug = require("bs-platform/lib/js/belt_Debug.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Definition$ReactTemplate = require("../Definition.bs.js");

Belt_Debug.setupChromeDebugger(/* () */0);

function isNumberConstant(definition) {
  var match = definition[/* implementation */0];
  if (match.tag) {
    return false;
  } else {
    switch (match[0].tag | 0) {
      case 1 : 
          return true;
      case 0 : 
      case 2 : 
          return false;
      
    }
  }
}

function getScope(nib, nodes) {
  var match = nib[/* connectionSide */0][/* node */0];
  if (match) {
    var nodeID = match[0];
    var node = Belt_MapString.getExn(nodes, nodeID);
    var match$1 = Definition$ReactTemplate.isFunctionDefinitionNode(node) && !Definition$ReactTemplate.isValueNib(nib[/* connectionSide */0][/* nib */1]);
    if (match$1) {
      return /* NodeScope */Block.simpleVariant("NodeScope", [nodeID]);
    } else {
      return node[/* scope */0];
    }
  } else {
    return /* GraphScope */0;
  }
}

function maybeNameless(string) {
  var match = string.length === 0;
  if (match) {
    return "(nameless)";
  } else {
    return string;
  }
}

function canConnectToNib(definition, isSource) {
  if (isSource) {
    if (Belt_List.length(definition[/* display */2][/* inputOrdering */0]) !== 0) {
      var match = definition[/* implementation */0];
      if (match.tag) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  } else {
    return true;
  }
}

var component = ReasonReact.reducerComponent("NodeMenu");

function make(definitions, nodes, nib, emit, _children) {
  return /* record */Block.record([
            "debugName",
            "reactClassInternal",
            "handedOffState",
            "willReceiveProps",
            "didMount",
            "didUpdate",
            "willUnmount",
            "willUpdate",
            "shouldUpdate",
            "render",
            "initialState",
            "retainedProps",
            "reducer",
            "jsElementWrapped"
          ], [
            component[/* debugName */0],
            component[/* reactClassInternal */1],
            component[/* handedOffState */2],
            component[/* willReceiveProps */3],
            component[/* didMount */4],
            component[/* didUpdate */5],
            component[/* willUnmount */6],
            component[/* willUpdate */7],
            component[/* shouldUpdate */8],
            (function (self) {
                var scope = getScope(nib, nodes);
                var renderCategory = function (name, category) {
                  var match = Caml_obj.caml_equal(self[/* state */1][/* category */0], category);
                  return React.createElement("a", {
                              className: match ? "selected" : "",
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* SelectCategory */Block.variant("SelectCategory", 0, [category]));
                                })
                            }, name);
                };
                var nodeSelector = function (filterFunction) {
                  return React.createElement("div", {
                              className: "type-selector-choices"
                            }, React.createElement("h3", undefined, "Definitions"), Belt_Array.map(Belt_MapString.toArray(Belt_MapString.keep(definitions, (function (_definitionID, definition) {
                                            if (Curry._1(filterFunction, definition)) {
                                              return canConnectToNib(definition, nib[/* isSource */1]);
                                            } else {
                                              return false;
                                            }
                                          }))), (function (param) {
                                    var definitionID = param[0];
                                    var match = Caml_obj.caml_equal(self[/* state */1][/* definitionID */1], definitionID);
                                    return React.createElement("a", {
                                                key: definitionID,
                                                className: match ? "selected" : "",
                                                onClick: (function (_event) {
                                                    return Curry._1(self[/* send */3], /* SelectDefinition */Block.variant("SelectDefinition", 1, [definitionID]));
                                                  })
                                              }, Definition$ReactTemplate.getDisplayName(param[1], "en"));
                                  })));
                };
                var nodeTypeLink = function (kind, name) {
                  var match = Caml_obj.caml_equal(self[/* state */1][/* definedNodeKind */2], kind);
                  return React.createElement("a", {
                              className: match ? "selected" : "",
                              onClick: (function (_event) {
                                  return Curry._1(self[/* send */3], /* SetDefinedNodeKind */Block.variant("SetDefinedNodeKind", 2, [kind]));
                                })
                            }, name);
                };
                var match = nib[/* isSource */1];
                var match$1 = self[/* state */1][/* category */0];
                var match$2 = self[/* state */1][/* definitionID */1];
                var tmp;
                if (match$2 !== undefined) {
                  var definitionID = match$2;
                  var definition = Belt_MapString.getExn(definitions, definitionID);
                  var match$3 = definition[/* implementation */0];
                  var tmp$1;
                  var exit = 0;
                  switch (match$3.tag | 0) {
                    case 1 : 
                        var match$4 = nib[/* isSource */1];
                        tmp$1 = React.createElement(React.Fragment, undefined, nodeTypeLink(/* FunctionPointerCallNode */2, "function pointer call"), match$4 ? null : React.createElement("a", {
                                    onClick: (function (_event) {
                                        return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                          "node",
                                                          "explicitConnectionSide",
                                                          "connectionNib"
                                                        ], [
                                                          Block.record([
                                                              "scope",
                                                              "kind"
                                                            ], [
                                                              getScope(nib, nodes),
                                                              Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                      "kind",
                                                                      "definitionID"
                                                                    ], [
                                                                      3,
                                                                      definitionID
                                                                    ])])
                                                            ]),
                                                          nib,
                                                          0
                                                        ])]));
                                      })
                                  }, "inline function"));
                        break;
                    case 2 : 
                    case 3 : 
                        exit = 1;
                        break;
                    case 4 : 
                        var match$5 = nib[/* isSource */1];
                        tmp$1 = match$5 ? React.createElement(React.Fragment, undefined, nodeTypeLink(/* ConstructorNode */4, "constructor"), React.createElement("a", {
                                    onClick: (function (_event) {
                                        return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                          "node",
                                                          "explicitConnectionSide",
                                                          "connectionNib"
                                                        ], [
                                                          Block.record([
                                                              "scope",
                                                              "kind"
                                                            ], [
                                                              getScope(nib, nodes),
                                                              Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                      "kind",
                                                                      "definitionID"
                                                                    ], [
                                                                      5,
                                                                      definitionID
                                                                    ])])
                                                            ]),
                                                          nib,
                                                          0
                                                        ])]));
                                      })
                                  }, "accessor")) : React.createElement(React.Fragment, undefined, React.createElement("a", {
                                    onClick: (function (_event) {
                                        return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                          "node",
                                                          "explicitConnectionSide",
                                                          "connectionNib"
                                                        ], [
                                                          Block.record([
                                                              "scope",
                                                              "kind"
                                                            ], [
                                                              getScope(nib, nodes),
                                                              Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                      "kind",
                                                                      "definitionID"
                                                                    ], [
                                                                      4,
                                                                      definitionID
                                                                    ])])
                                                            ]),
                                                          nib,
                                                          0
                                                        ])]));
                                      })
                                  }, "constructor"), nodeTypeLink(/* AccessorNode */5, "accessor"));
                        break;
                    default:
                      tmp$1 = React.createElement(React.Fragment, undefined, "TODO");
                  }
                  if (exit === 1) {
                    var match$6 = nib[/* isSource */1];
                    tmp$1 = React.createElement(React.Fragment, undefined, nodeTypeLink(/* FunctionCallNode */0, "call"), match$6 ? null : React.createElement("a", {
                                onClick: (function (_event) {
                                    return Curry._1(self[/* send */3], /* AddValue */0);
                                  })
                              }, "value"));
                  }
                  var match$7 = self[/* state */1][/* definedNodeKind */2];
                  var tmp$2;
                  if (match$7 !== undefined) {
                    var definedNodeKind = match$7;
                    var display = Definition$ReactTemplate.displayNode(/* record */Block.record([
                            "scope",
                            "kind"
                          ], [
                            getScope(nib, nodes),
                            Block.variant("DefinedNode", 1, [/* record */Block.record([
                                    "kind",
                                    "definitionID"
                                  ], [
                                    definedNodeKind,
                                    definitionID
                                  ])])
                          ]), definitions, "en");
                    var match$8 = nib[/* isSource */1];
                    var match$9 = nib[/* isSource */1];
                    tmp$2 = React.createElement("div", undefined, React.createElement("h3", undefined, match$8 ? "Input" : "Output"), Belt_List.toArray(Belt_List.map(match$9 ? display[/* inputs */0] : display[/* outputs */1], (function (displayNib) {
                                    return React.createElement("a", {
                                                key: Definition$ReactTemplate.nibKey(displayNib[/* nib */1]),
                                                onClick: (function (_event) {
                                                    return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                                      "node",
                                                                      "explicitConnectionSide",
                                                                      "connectionNib"
                                                                    ], [
                                                                      Block.record([
                                                                          "scope",
                                                                          "kind"
                                                                        ], [
                                                                          getScope(nib, nodes),
                                                                          Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                                  "kind",
                                                                                  "definitionID"
                                                                                ], [
                                                                                  definedNodeKind,
                                                                                  definitionID
                                                                                ])])
                                                                        ]),
                                                                      nib,
                                                                      displayNib[/* nib */1]
                                                                    ])]));
                                                  })
                                              }, maybeNameless(displayNib[/* name */0]));
                                  }))));
                  } else {
                    tmp$2 = null;
                  }
                  tmp = React.createElement(React.Fragment, undefined, React.createElement("div", undefined, React.createElement("h3", undefined, "Usage"), tmp$1), tmp$2);
                } else {
                  tmp = null;
                }
                return React.createElement(React.Fragment, undefined, React.createElement("h2", undefined, "Create a node"), React.createElement("div", {
                                className: "type-selector-menu"
                              }, React.createElement("div", {
                                    className: "type-selector-categories"
                                  }, React.createElement("h3", undefined, "Category"), renderCategory("Defined", /* AllCategory */1), match ? null : React.createElement(React.Fragment, undefined, React.createElement("a", {
                                              onClick: (function (_event) {
                                                  return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                                    "node",
                                                                    "explicitConnectionSide",
                                                                    "connectionNib"
                                                                  ], [
                                                                    Block.record([
                                                                        "scope",
                                                                        "kind"
                                                                      ], [
                                                                        scope,
                                                                        0
                                                                      ]),
                                                                    nib,
                                                                    0
                                                                  ])]));
                                                })
                                            }, "Reference"))), match$1 !== undefined ? (
                                  match$1 ? nodeSelector((function (param) {
                                            return true;
                                          })) : nodeSelector(isNumberConstant)
                                ) : null, tmp));
              }),
            (function (param) {
                return /* record */Block.record([
                          "category",
                          "definitionID",
                          "definedNodeKind"
                        ], [
                          undefined,
                          undefined,
                          undefined
                        ]);
              }),
            component[/* retainedProps */11],
            (function (action, state) {
                if (typeof action === "number") {
                  if (nib[/* isSource */1] && Caml_obj.caml_notequal(state[/* definedNodeKind */2], /* ConstructorNode */4)) {
                    return /* NoUpdate */0;
                  } else {
                    return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                                  var match = state[/* definitionID */1];
                                  var tmp;
                                  if (match !== undefined) {
                                    tmp = match;
                                  } else {
                                    throw Caml_builtin_exceptions.not_found;
                                  }
                                  return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                    "node",
                                                    "explicitConnectionSide",
                                                    "connectionNib"
                                                  ], [
                                                    Block.record([
                                                        "scope",
                                                        "kind"
                                                      ], [
                                                        getScope(nib, nodes),
                                                        Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                "kind",
                                                                "definitionID"
                                                              ], [
                                                                1,
                                                                tmp
                                                              ])])
                                                      ]),
                                                    nib,
                                                    0
                                                  ])]));
                                })]);
                  }
                } else {
                  switch (action.tag | 0) {
                    case 0 : 
                        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                      "category",
                                      "definitionID",
                                      "definedNodeKind"
                                    ], [
                                      action[0],
                                      undefined,
                                      undefined
                                    ])]);
                    case 1 : 
                        var definitionID = action[0];
                        var match = Belt_MapString.getExn(definitions, definitionID)[/* implementation */0];
                        if (match.tag) {
                          return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                        "category",
                                        "definitionID",
                                        "definedNodeKind"
                                      ], [
                                        state[/* category */0],
                                        definitionID,
                                        undefined
                                      ])]);
                        } else if (nib[/* isSource */1]) {
                          return /* NoUpdate */0;
                        } else {
                          return /* SideEffects */Block.variant("SideEffects", 1, [(function (param) {
                                        return Curry._1(emit, /* AddNode */Block.variant("AddNode", 4, [/* record */Block.record([
                                                          "node",
                                                          "explicitConnectionSide",
                                                          "connectionNib"
                                                        ], [
                                                          Block.record([
                                                              "scope",
                                                              "kind"
                                                            ], [
                                                              getScope(nib, nodes),
                                                              Block.variant("DefinedNode", 1, [/* record */Block.record([
                                                                      "kind",
                                                                      "definitionID"
                                                                    ], [
                                                                      1,
                                                                      definitionID
                                                                    ])])
                                                            ]),
                                                          nib,
                                                          0
                                                        ])]));
                                      })]);
                        }
                    case 2 : 
                        return /* Update */Block.variant("Update", 0, [/* record */Block.record([
                                      "category",
                                      "definitionID",
                                      "definedNodeKind"
                                    ], [
                                      state[/* category */0],
                                      state[/* definitionID */1],
                                      action[0]
                                    ])]);
                    
                  }
                }
              }),
            component[/* jsElementWrapped */13]
          ]);
}

exports.isNumberConstant = isNumberConstant;
exports.getScope = getScope;
exports.maybeNameless = maybeNameless;
exports.canConnectToNib = canConnectToNib;
exports.component = component;
exports.make = make;
/*  Not a pure module */
