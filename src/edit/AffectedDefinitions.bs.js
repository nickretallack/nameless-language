// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");

function findDefinitionUses(definitionID, definitions) {
  return Belt_MapString.keep(definitions, (function (param, otherDefinition) {
                var match = otherDefinition[/* implementation */0];
                if (match.tag === 3) {
                  return Belt_MapString.some(match[0][/* nodes */2], (function (param, node) {
                                var match = node[/* kind */1];
                                if (typeof match === "number" || !match.tag) {
                                  return false;
                                } else {
                                  return match[0][/* definitionID */1] === definitionID;
                                }
                              }));
                } else {
                  return false;
                }
              }));
}

function findConnectedDefinitions(definitionID, nibID, isInput, definitions) {
  return Belt_MapString.keep(definitions, (function (param, otherDefinition) {
                var match = otherDefinition[/* implementation */0];
                if (match.tag === 3) {
                  var match$1 = match[0];
                  var connections = match$1[/* connections */1];
                  var checkConnectionSide = function (connectionSide, nodeID) {
                    var match = connectionSide[/* node */0];
                    if (match) {
                      var match$1 = connectionSide[/* nib */1];
                      if (typeof match$1 === "number" || match$1.tag || match[0] !== nodeID) {
                        return false;
                      } else {
                        return match$1[0] === nibID;
                      }
                    } else {
                      return false;
                    }
                  };
                  return Belt_MapString.some(match$1[/* nodes */2], (function (nodeID, node) {
                                var match = node[/* kind */1];
                                if (typeof match === "number" || !match.tag) {
                                  return false;
                                } else {
                                  var match$1 = match[0];
                                  var kind = match$1[/* kind */0];
                                  var checkSink = function (param) {
                                    return Belt_Map.some(connections, (function (sink, _source) {
                                                  return checkConnectionSide(sink, nodeID);
                                                }));
                                  };
                                  var checkSource = function (param) {
                                    return Belt_Map.some(connections, (function (_sink, source) {
                                                  return checkConnectionSide(source, nodeID);
                                                }));
                                  };
                                  var match$2 = match$1[/* definitionID */1] === definitionID && isInput;
                                  if (match$2) {
                                    switch (kind) {
                                      case 3 : 
                                          return checkSource(/* () */0);
                                      case 0 : 
                                      case 2 : 
                                      case 4 : 
                                          return checkSink(/* () */0);
                                      case 1 : 
                                      case 5 : 
                                          return false;
                                      
                                    }
                                  } else {
                                    switch (kind) {
                                      case 0 : 
                                      case 2 : 
                                          return checkSource(/* () */0);
                                      case 1 : 
                                      case 4 : 
                                          return false;
                                      case 3 : 
                                      case 5 : 
                                          return checkSink(/* () */0);
                                      
                                    }
                                  }
                                }
                              }));
                } else {
                  return false;
                }
              }));
}

exports.findDefinitionUses = findDefinitionUses;
exports.findConnectedDefinitions = findConnectedDefinitions;
/* No side effect */
