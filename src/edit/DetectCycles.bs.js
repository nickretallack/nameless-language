// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_MapString = require("bs-platform/lib/js/belt_MapString.js");
var Belt_SetString = require("bs-platform/lib/js/belt_SetString.js");

function followConnections(connections, nodeID) {
  return Belt_Map.reduce(connections, Belt_SetString.empty, (function (acc, sink, source) {
                var match = sink[/* node */0];
                if (match) {
                  var match$1 = nodeID === match[0];
                  if (match$1) {
                    var match$2 = source[/* node */0];
                    if (match$2) {
                      return Belt_SetString.add(acc, match$2[0]);
                    } else {
                      return acc;
                    }
                  } else {
                    return acc;
                  }
                } else {
                  return acc;
                }
              }));
}

function dfs(connections, nodeID, seen) {
  return Belt_List.some(Belt_SetString.toList(followConnections(connections, nodeID)), (function (sourceNodeID) {
                if (Belt_SetString.has(seen, sourceNodeID)) {
                  return true;
                } else {
                  return dfs(connections, sourceNodeID, Belt_SetString.add(seen, nodeID));
                }
              }));
}

function detectCycles(connections, nodes) {
  return Belt_List.some($$Array.to_list(Belt_MapString.keysToArray(nodes)), (function (nodeID) {
                return dfs(connections, nodeID, Belt_SetString.fromArray(/* array */[nodeID]));
              }));
}

exports.followConnections = followConnections;
exports.dfs = dfs;
exports.detectCycles = detectCycles;
/* No side effect */
