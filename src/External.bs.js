// Generated by BUCKLESCRIPT VERSION 4.0.14, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function evaluateIndex(inputs, index) {
  var match = Belt_List.getExn(inputs, index);
  if (match !== undefined) {
    return /* EvaluationResult */Block.__(0, [match]);
  } else {
    return /* EvaluationRequired */Block.__(1, [index]);
  }
}

function conditionalBranch(inputs, outputIndex) {
  if (outputIndex !== 0) {
    throw Caml_builtin_exceptions.not_found;
  }
  var match = Belt_List.getExn(inputs, 0);
  if (match !== undefined) {
    var match$1 = match;
    if (match$1.tag) {
      switch (match$1[0][/* definitionID */0]) {
        case "no" : 
            return evaluateIndex(inputs, 2);
        case "yes" : 
            return evaluateIndex(inputs, 1);
        default:
          throw Caml_builtin_exceptions.not_found;
      }
    } else {
      throw Caml_builtin_exceptions.not_found;
    }
  } else {
    return /* EvaluationRequired */Block.__(1, [0]);
  }
}

function evaluateExternal(name, outputIndex, inputs) {
  var externalFunction;
  if (name === "branch") {
    externalFunction = conditionalBranch;
  } else {
    throw Caml_builtin_exceptions.not_found;
  }
  return Curry._2(externalFunction, inputs, outputIndex);
}

exports.evaluateIndex = evaluateIndex;
exports.conditionalBranch = conditionalBranch;
exports.evaluateExternal = evaluateExternal;
/* No side effect */
